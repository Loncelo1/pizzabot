# -*- coding: utf-8 -*-
"""Telegram_bot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iYHqz5LwTwnmdsVsUJ0v8CjJvPic9pGe
"""

#  qveshion=input()
#  if qveshion=="Привет":
#   print("Привет")
#  if qveshion=="Как дела?":
#    print("Нормально")
#  if qveshion=="Пока":
#    print("Пока")
#  if qveshion=="Поможешь?":
#   print("Да")
#  if qveshion=="Молодец":
#    print("Спасибо")
#  if qveshion=="Ты меня очень сильно растроил":
#    print("Прости меня")

# import random
# import nltk
# while True:
#  text=input()
#  def filter(text):
#    text=text.lower()
#    alf="абвгдеёжзийклмнопрстуфхцчшщъыьэюя -"
#    memory=[c for c in text if c in alf]
#    return "".join(memory)
#  def match(text,exmaple):
#    text=filter(text)
#    exmaple=exmaple.lower()
#    distance=nltk.edit_distance(text,exmaple)/len(exmaple)
#    return distance<0.4


#  BotConfig={"привет":["Привет","Добрый день","Здравствуйте","Приветик","Здорова","Hello","Приветствую","Как я рад снова вас видеть","Слава богу ты пришёл","Доброго времени суток"],
#             "пока":["Пока","Прощай","До свидания","Чау","Ухожу, но обещаю вернуться","Прекращён процес передачи информации","Наконец-то!, пока","Покеда",
#                     "Родина к долгу призывает, прощай моя любовь."]
#            }
#  for key in BotConfig:
#    if match(text,key):
#      print(random.choice(BotConfig[key]))
#      break
 
#  if key=="пока":
#    break

# #intent-намеривания
# import random
# import nltk
# while True:
#   def filter(text):
#     text=text.lower()
#     alf="абвгдеёжзийклмнопрстуфхцчшщъыьэюя -"
#     memory=[c for c in text if c in alf]
#     return "".join(memory)
#   def match(text,exmaple):
#     text=filter(text)
#     exmaple=exmaple.lower()
#     distance=nltk.edit_distance(text,exmaple)/len(exmaple)
#     return distance<0.4
#   BotConfig={
#       "food":{
#           "exmaples":["Хочу есть","Хочу сделать заказ","Дай жрать"],
#           "responses":["Хорошо, как вас зовут?"]
#       },
#       "size":{
#           "exmaples":["Большую","Среднею","Маленькую"],
#           "responses":["Как вы будете платить?"]
#       },
#       "many":{
#           "exmaples":["Наличные","Безнал","Натурой"],
#           "responses":["Куда привести заказ? Уточните адрес."]
#       }}
#   def get_anwer(text):
#     for intent in BotConfig:
#       for exmaples in BotConfig[intent]["exmaples"]:
#         if match(text,exmaples):
#           return(random.choice(BotConfig[intent]["responses"]))
#   text=input()
#   if text.lower()=="закончить":
#     break
#   answer=get_anwer(text)
#   print(answer)

import json
BOT_CONFIG={"intents":{
      "yes and no":{
          "examples":["Да","Нет"],
          "responses":[]
          },
      "food":{
          "examples":["Хочу есть","Хочу сделать заказ","Дай жрать","Повторить заказ","Хочу жрать"],
          "responses":["Хорошо, как вас зовут?"]
      },
      "size":{
          "examples":["Большую","Среднею","Маленькую"],
          "responses":["Как вы будете платить?"]
      },
      "many":{
          "examples":["Наличные","Безнал","Натурой"],
          "responses":["Куда привести заказ? Уточните адрес."],
      },
      "my name":{
          "examples":["Руслан","Юнес","Александр", "Алексей", "Анатолий", "Андрей", "Антон", "Аркадий", "Арсений", "Артём", "Артур", "Борис", "Вадим", "Валентин", "Валерий", "Василий", "Виктор", "Виталий", "Владимир", "Владислав", "Вячеслав", "Георгий", "Глеб", "Григорий", "Даниил", "Денис", "Дмитрий", "Евгений", "Егор", "Иван", "Игорь", "Илья", "Кирилл", "Константин", "Лев", "Леонид", "Максим", "Марк", "Матвей", "Михаил", "Никита", "Николай", "Олег", "Павел", "Пётр", "Роман", "Руслан", "Сергей", "Степан", "Тимур", "Фёдор", "Юрий", "Ярослав"],
          "responses":["Какую пиццу вы будете, большая, среднея или маленькая?"]
      },
      "street":{
          "examples":[
'Авиационная',
'Аллейная ',
'Апрельская ' ,
'Аэровокзальный' ,
'Аэрофлотская  ',
'Бакинская  ',
'Бакинский  ',
'Банный  ',
'Белореченский'  ,
'Белорусская  ',
'Белорусский  ',
'Белых акаций  ',
'Березовый  ',
'Богатырская ' ,
'Вегетарианская'  ,
'Верхнеизвестинская' , 
'Верхнеимеретинская ' ,
'Веселая  ',
'Взлетная  ',
'Вокзальная ' ,
'Воронежская ' ,
'Ворошиловградская ' ,
'Воскресенская  ',
'Гвардейская  ',
'Гиацинтовая  ',
'Голубая  ',
'Горный  ',
'Гостеприимная',  
'Губернская  ',
'Гудаутская  ',
'Дачная  ',
'Демократическая',  
'Демократический ', 
'Добрый  ',
'Донецкий ' ,
'Ереванская' , 
'Ереванский ' ,
'Жемчужная  ',
'Ивовый  ',
'Известинская ' ,
'Известинский  ',
'Известинский проезд',
'Изумрудная',
'Интернациональная',  
'Казачья  ',
'Камышовая ', 
'Каспийская ', 
'Кедровая  ',
'Киевская  ',
'Кирпичная  ',
'Кишиневская ', 
'Кленовая  ',
'Ключевой  ',
'Колхозная  ',
'Континентальный проспект',
'Костромская  ',
'Краснопролетарская',  
'Кутаисская  ',
'Лазурная  ',
'Лебединая  ',
'Ленинаканская ' ,
'Лесная  ',
'Листопадная',  
'Луговая  ',
'Малахитовая' , 
'Марсовый  ',
'Медовая  ',
'Международная',  
'Мзымтинская  ',
'Миндальная  ',
'Миндальный  ',
'Морской бульвар',
'Набережная  ',
'Народная  ',
'Насыпная  ',
'Нижнеимеретинская' , 
'Новоадлерская  ',
'Новогорная  ',
'Новокавказская',  
'Общинная  ',
'Олимпийский проспект',
'Оранжевая  ',
'Орбитовская ' ,
'Орлиная  ',
'Осенний  ',
'Парусная  ',
'Перелетная ' ,
'Перепелиный ' ,
'Перспективная',  
'Пихтовый  ',
'Планерный  ',
'Полевая  ',
'Православная ', 
'Прибрежная  ',
'Прибрежный  ',
'Привокзальная  ',
'Привольная  ',
'Приграничная  ',
'Приреченская  ',
'Ружейная  ',
'Садовая  ',
'Саратовская  ',
'Саратовский  ',
'Семейная  ',
'Совхозная  ',
'Соколиная  ',
'Спасская  ',
'Староклубная  ',
'Старонасыпная  ',
'Старообрядная  ',
'Старообрядческая  ',
'Староохотничья  ',
'Старошкольная  ',
'Стартовая  ',
'Субтропическая  ',
'Суздальская  ',
'Таврическая  ',
'Тверской  ',
'Тихий  ',
'Тополиная  ',
'Триумфальная  ',
'Триумфальный проезд',
'Троицкая  ',
'Тростниковая  ',
'Урожайная  ',
'Фабричная  ',
'Фабричный  ',
'Фермерская  ',
'Фермерский  ',
'Фигурная  ',
'Хадыженская  ',
'Хоккейная  ',
'Хостинская  ',
'Хостинский  ',
'Хурмовый  ',
'Хуторская  ',
'Цветочная  ',
'Цимлянская  ',
'Цитрусовая  ',
'Черниговская  ',
'Шкиперская  ',
'Школьная  ',
'Щербиновская  ',
'Эпроновская  ',
'Южно-российска',
'Бульвар Надежд',
'Бестужева',
'Богдана Хмельницкого',
'Кувшинок',
'Мира',
'Революции',
'Ромашек',
'Чкалова',
'8 марта',
'26 Бакинских комиссаров',
'65 лет Победы',
'Акаций',
'Белых акаций',
'Бестужева',
'Богдана Хмельницкого',
'Войтенко',
'Гастелло',
'Герцена',
'Гоголя',
'Голубые дали',
'Дзержинского',
'Диброва',
'Добрых надежд',
'Железнодорожный переезд',
'Журналистов',
'Зеленые дали',
'Искры',
'Калинина',
'Камелий',
'Карла Маркса',
'Кирова',
'Клименко',
'Короленко',
'Котовского',
'Крамского',
'Красная горка',
'Крупской',
'Куйбышева',
'Кутузова',
'Ленина',
'Лескова',
'Лилий',
'Луначарского',
'Магнолий',
'Мелетяна',
'Менделеева',
'Метревели',
'Мимоз',
'Мира',
'Молокова',
'Нагорный тупик',
'Надежды',
'Ореховый тупик',
'Павлика Морозова',
'Панфилова',
'Пархоменко',
'Попова',
'Поселок Мирный',
'Просвещения',
'Пчеловодов',
'Революции',
'Рекордов',
'Ромашек',
'Свердлова',
'Станиславского',
'Сулимовка',
'Трубачева',
'Тюльпанов',
'Удачи',
'Ульянова',
'Урицкого',
'Фиалок',
'Фрунзе',
'Худякова',
'Чаек',
'Чемпионов',
'Чернышевского',
'Чкалова',
'Щирова',
'Щорса',
'Энгельса',
'Энергетиков',
' Южных культур'],
          "responses":[]
      
      }}}

memoryall=[]
X=[]
y=[]
for name, date in BOT_CONFIG["intents"].items():
  for example in date["examples"]:
    X.append(example)
    y.append(name)
from sklearn.feature_extraction.text import CountVectorizer
vectorizer=CountVectorizer()
vectorizer.fit(X)
vecX=vectorizer.transform(X)
from sklearn.ensemble import RandomForestClassifier
Forest=RandomForestClassifier(n_estimators=300, min_samples_split=3)
Forest.fit(vecX,y)
Forest.score(vecX,y)

import random
import nltk

def filter(text):
  text=text.lower()
  alf="абвгдеёжзийклмнопрстуфхцчшщъыьэюя -"
  memory=[c for c in text if c in alf]
  return "".join(memory)
def match(text,example):
  text=filter(text)
  example=example.lower()
  distance=nltk.edit_distance(text,example)/len(example)
  return distance<0.2 
def get_intent(text):
  for intent in BOT_CONFIG["intents"]:
    for examples in BOT_CONFIG["intents"][intent]["examples"]:
      if match(text,examples):
        return intent
def bot(text):
  global memoryall
  intent = get_intent(text)
  if BOT_CONFIG["intents"][intent]==BOT_CONFIG["intents"]["yes and no"]:
    if text==BOT_CONFIG["intents"]["yes and no"]["examples"][0]:
      memoryall=[]
      return("Спасибо за заказ.")
    else:
      memoryall=[]
      return("Если вы хотите повторить заказ, то напишите - повторить заказ")

  if BOT_CONFIG["intents"][intent]==BOT_CONFIG["intents"]["street"]:
    return (f"{memoryall[1]} ваш заказ {memoryall[2]} пицца, оплата - {memoryall[3]}, доставить по адресу {memoryall[4]}")
  if not intent:
    transform_text = vectorizer.transform([text])
    intent = Forest.predict(transform_text[0])
    intent = intent[0]
  if intent:
      
    return random.choice(BOT_CONFIG["intents"][intent]["responses"])
  else:
    return random.choice(BOT_CONFIG["failure_phrases"])
      
    
#text=input("Пользователь: ")    
#answer=bot(text)
#print(f"Бот: {answer}")

from telegram import Update
from telegram.ext import Updater
from telegram.ext import MessageHandler, Filters
BOT_KEY="5384260817:AAGnfSmzsEQgRCHMB-5aOn2_cjsauu0CYA0"
def botReactOnMessage(update: Update, context):
  text = update.message.text
  print(f"User:{text}")
  memoryall.append(text)
  print(memoryall)
  reply=bot(text)
  print(f"Bot: {reply}")
  update.message.reply_text(reply)
upd=Updater(BOT_KEY)
handler=MessageHandler(Filters.text,botReactOnMessage)
upd.dispatcher.add_handler(handler)
upd.start_polling()
upd.idle()

# ! pip install python-telegram-bot

